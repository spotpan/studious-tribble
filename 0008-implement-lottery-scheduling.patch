From aafac7d9e9235822253731d3a71225df64cc4243 Mon Sep 17 00:00:00 2001
From: spotpan <yb960@nyu.edu>
Date: Sun, 8 Apr 2018 18:32:37 -0400
Subject: [PATCH 8/8] implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 48 ++++++++++++++++++++++++++++++++++++++++++++++--
 proc.h    |  2 ++
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 12 ++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..e158a74 100644
--- a/proc.c
+++ b/proc.c
@@ -271,6 +271,14 @@ scheduler(void)
   struct proc *p;
   int foundproc = 1;
 
+  long total_tickets = 0;
+  long counter = 0;
+  long winner;
+
+  int got_total = 0;
+  int winner_found = 0;
+
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -278,12 +286,42 @@ scheduler(void)
     if (!foundproc) hlt();
     foundproc = 0;
 
+    if (got_total == 1){
+	foundproc = 0;
+	winner = random_at_most(total_tickets);
+	total_tickets = 0;
+	counter = 0;
+	winner_found = 0;
+    }
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+    if(p->state != RUNNABLE){
+	continue;
+    }
+
+
+    if(got_total == 0){
+	total_tickets += p->tickets;
+	continue;
+    }
+
+    counter += p->tickets;
+
+    if (counter < winner) {
+	total_tickets += p->tickets;
+	continue;
+    }
+
+    if (winner_found) {
+	total_tickets += p->tickets;
+	continue;
+    }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -296,10 +334,16 @@ scheduler(void)
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
+
+    if (p->state == RUNNABLE){
+	total_tickets += p->tickets;
+	winner_found = 1;
+    }
+
       proc = 0;
     }
     release(&ptable.lock);
-
+    got_total =1;
   }
 }
 
@@ -467,7 +511,7 @@ procdump(void)
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
+        cprintf(" %p", pc[i]); 
     }
     cprintf("\n");
   }
diff --git a/proc.h b/proc.h
index 3b9c3ac..0e28d20 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int tickets;                 // HW3 lottery tickets 
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..b2c50f0 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,15 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void) {
+	int n;
+	if(argint(0, &n) < 0){
+		proc->tickets = 10;
+	}
+	else {
+		proc->tickets = n;
+	}
+	return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

